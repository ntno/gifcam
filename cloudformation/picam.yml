AWSTemplateFormatVersion: '2010-09-09'
Description: creates bucket for gifs, IAM roles for Lambda and pi, and Lambda function
Parameters:
  PicamBucketName:
    Type: String
    Description: name for the bucket
  PicamRoleName:
    Type: String
    Description: prefix for the IAM role pi will use to upload files
    Default: picam-pi-ex
  TwitterLambdaRoleName:
    Type: String
    Description: prefix for the IAM role Lambda will use to tweet gifs
    Default: picam-tweet-gifs-ex
  TwitterLambdaName:
    Type: String
    Description: prefix for the Lambda function which will tweet gifs
    Default: picam-tweet-gifs
  GenerateUrlLambdaRoleName:
    Type: String
    Description: prefix for the IAM role Lambda will use to generate a presigned URL for the pi
    Default: picam-generate-s3-url-ex
  GenerateUrlLambdaName:
    Type: String
    Description: prefix for the Lambda function which will generate a presigned URL for the pi
    Default: picam-generate-s3-url
  #NOTE - this bucket is not created via the picam.yml template, you must create it beforehand and upload the code
  CodeBucketName:
    Type: String
    Description: name of bucket containing lambda code 
Resources:
  GenerateUrlLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref CodeBucketName
        S3Key: lambda/picam/generateUrl.zip
      Description: generates a presigned url so that the pi can upload gifs without access keys
      Environment: 
        Variables:
          #NOTE - you must store the tokens in a systems manager parameter store beforehand
          #store must be in the same region as the cloud formation stack
          URL_TIMEOUT: '{{resolve:ssm:PICAM_PRESIGNED_URL_TIMEOUT:2}}'
          BUCKET_NAME: !Ref PicamBucket
          PUT_PREFIX: 'gifs/'
      FunctionName: !Sub '${GenerateUrlLambdaName}-${AWS::Region}'
      Handler: generateUrl.lambda_handler
      Role: !GetAtt 
        - GenerateUrlLambdaExecutionRole
        - Arn
      Runtime: python3.6
  TwitterLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref CodeBucketName
        S3Key: lambda/picam/tweet.zip
      Description: publishes gifs to social media
      Environment: 
        Variables:
          TZ: ET
          #NOTE - you must store the tokens in a systems manager parameter store beforehand
          #store must be in the same region as the cloud formation stack
          TWITTER_APP_KEY: '{{resolve:ssm:TWITTER_PICAM_APP_KEY:1}}'
          TWITTER_APP_SECRET: '{{resolve:ssm:TWITTER_PICAM_APP_SECRET:1}}'
          TWITTER_OAUTH_TOKEN: '{{resolve:ssm:TWITTER_PICAM_OAUTH_TOKEN:1}}'
          TWITTER_OAUTH_TOKEN_SECRET: '{{resolve:ssm:TWITTER_PICAM_OAUTH_TOKEN_SECRET:1}}'
          TWITTER_MESSAGE: '{{resolve:ssm:TWITTER_PICAM_STATUS_MESSAGE:2}}'
      FunctionName: !Sub '${TwitterLambdaName}-${AWS::Region}'
      Handler: tweet.lambda_handler
      Role: !GetAtt 
        - TwitterLambdaExecutionRole
        - Arn
      Runtime: python3.6
  TwitterLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt
        - TwitterLambda
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub 'arn:aws:s3:::${PicamBucketName}'         #use sub and not ref to avoid circular dependency 
  PicamBucket: 
    DependsOn:
      - TwitterLambdaInvokePermission
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        IgnorePublicAcls: True
        BlockPublicPolicy: True
        RestrictPublicBuckets: True
      BucketEncryption: 
          ServerSideEncryptionConfiguration: 
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
      BucketName: !Ref PicamBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  -
                    Name: suffix
                    Value: '.gif'
            Function: !GetAtt
              - TwitterLambda
              - Arn
  PicamBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PicamBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyIncorrectEncryptionHeader
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: 
              - !Join
                  - ''
                  - - !GetAtt 
                      - PicamBucket
                      - Arn
                    - '/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': AES256
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: 
              - !Join
                  - ''
                  - - !GetAtt 
                      - PicamBucket
                      - Arn
                    - '/*'
            Condition:
              'Null':
                's3:x-amz-server-side-encryption': True
  PicamExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS : !Ref AWS::AccountId
            Action:
              - sts:AssumeRole
      Policies: 
        - PolicyName: !Sub '${PicamRoleName}-${AWS::Region}-permissions'
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Sid: WriteToGifsFolder
                Action: 's3:PutObject'
                Effect: Allow
                Resource: 
                  - !Sub 'arn:aws:s3:::${PicamBucketName}/gifs/*'   #use sub and not ref to avoid circular dependency 
      RoleName: !Sub '${PicamRoleName}-${AWS::Region}'
  TwitterLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies: 
        - PolicyName: !Sub '${TwitterLambdaRoleName}-${AWS::Region}-permissions'
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Sid: ReadFromGifsFolder
                Action: 's3:GetObject'
                Effect: Allow
                Resource: 
                  - !Sub 'arn:aws:s3:::${PicamBucketName}/gifs/*'   #use sub and not ref to avoid circular dependency 
              - Sid: CloudWatchLogAccess
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: 
                  - 'arn:aws:logs:*:*:*'
      RoleName: !Sub '${TwitterLambdaRoleName}-${AWS::Region}'
  GenerateUrlLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies: 
        - PolicyName: !Sub '${GenerateUrlLambdaRoleName}-${AWS::Region}-permissions'
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Sid: PutObjectToGifsFolder
                Action: 's3:PutObject'
                Effect: Allow
                Resource: 
                  - !Sub 'arn:aws:s3:::${PicamBucketName}/gifs/*'   #use sub and not ref to avoid circular dependency 
              - Sid: CloudWatchLogAccess
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: 
                  - 'arn:aws:logs:*:*:*'
      RoleName: !Sub '${GenerateUrlLambdaRoleName}-${AWS::Region}'
