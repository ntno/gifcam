AWSTemplateFormatVersion: 2010-09-09
Description: creates bucket for gifs, IAM roles for Lambdas, and Lambda functions
Parameters:
  PicamBucketName:
    Type: String
    Description: name for the bucket
  TwitterLambdaName:
    Type: String
    Description: prefix for the Lambda function which will tweet gifs
    Default: picam-tweet-gifs
  GenerateUrlLambdaName:
    Type: String
    Description: prefix for the Lambda function which will generate a presigned URL for the pi
    Default: picam-generate-s3-url
  CreateGifLambdaName:
    Type: String
    Description: prefix for the Lambda function which will create gif from raw jpgs
    Default: picam-create-gif
  RawJpgsObjectKey:
    Type: String
    Description: key where raw jpgs will be stored
    Default: 'jpgs'
  GifsObjectKey:
    Type: String
    Description: key where raw jpgs will be stored
    Default: 'gifs'
  #NOTE - the code bucket is not created via the picam.yml template, you must create it beforehand and upload the code
  CodeBucketName:
    Type: String
    Description: name of bucket containing lambda code 
  #NOTE - the graphics magick lambda layer is not created via the picam.yml template
  #you can use the layer created by @rpidanny (DEFAULT) or create your own
  #if you use the default layer then you may need to update the region to match your lambda functions
  GraphicsMagickLambdaLayerArn:
    Type: String
    Description: location of lambda layer with GraphicsMagick installed
    Default: arn:aws:lambda:us-east-2:175033217214:layer:graphicsmagick:2
Resources:
  WriteToGifsFolderPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: WriteToPicamGifsFolder
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Action: 's3:PutObject'
            Effect: Allow
            Resource: 
              - !Sub 'arn:aws:s3:::${PicamBucketName}/${GifsObjectKey}/*'   #use sub and not ref to avoid circular dependency 
      Roles: 
        - !Ref CreateGifLambdaExecutionRole
  WriteToJpgsFolderPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: WriteToPicamJpgsFolder
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Action: 's3:PutObject'
            Effect: Allow
            Resource: 
              - !Sub 'arn:aws:s3:::${PicamBucketName}/${RawJpgsObjectKey}/*'   #use sub and not ref to avoid circular dependency 
      Roles: 
        - !Ref GenerateUrlLambdaExecutionRole
  ReadGifsFolderPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: ReadGifsFolder
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Action: 
              # - 's3:ListObjects'
              - 's3:ListBucket'
            Effect: Allow
            Resource: 
              - !Sub 'arn:aws:s3:::${PicamBucketName}'                      #use sub and not ref to avoid circular dependency 
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: 
              - !Sub 'arn:aws:s3:::${PicamBucketName}/${GifsObjectKey}/*'   #use sub and not ref to avoid circular dependency 
      Roles: 
        - !Ref TwitterLambdaExecutionRole
  ReadJpgsFolderPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: ReadJpgsFolder
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Action: 
              # - 's3:ListObjects'
              - 's3:ListBucket'
            Effect: Allow
            Resource: 
              - !Sub 'arn:aws:s3:::${PicamBucketName}'                        #use sub and not ref to avoid circular dependency 
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: 
              - !Sub 'arn:aws:s3:::${PicamBucketName}/${RawJpgsObjectKey}/*'   #use sub and not ref to avoid circular dependency 
      Roles: 
        - !Ref CreateGifLambdaExecutionRole
  LambdaWriteCloudwatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: LambdaWriteCloudwatchLogs
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Action: 
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: 
              - 'arn:aws:logs:*:*:*'
      Roles: 
        - !Ref CreateGifLambdaExecutionRole
        - !Ref TwitterLambdaExecutionRole
        - !Ref GenerateUrlLambdaExecutionRole
  CreateGifLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Layers:
        - !Ref GraphicsMagickLambdaLayerArn
      Code: 
        S3Bucket: !Ref CodeBucketName
        S3Key: lambda/picam/createGif.zip
      Description: converts jpgs to gif
      Environment: 
        Variables:
          BUCKET_NAME: !Ref PicamBucketName
          INPUT_PREFIX: !Ref RawJpgsObjectKey
          OUTPUT_PREFIX: !Ref GifsObjectKey
      FunctionName: !Sub '${CreateGifLambdaName}-${AWS::Region}'
      Handler: createGif.lambda_handler
      Role: !GetAtt 
        - CreateGifLambdaExecutionRole
        - Arn
      Runtime: python3.6
  GenerateUrlLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref CodeBucketName
        S3Key: lambda/picam/generateUrl.zip
      Description: generates a presigned url so that the pi can upload jpgs without access keys
      Environment: 
        Variables:
          #NOTE - you must store the tokens in a systems manager parameter store beforehand
          #store must be in the same region as the cloud formation stack
          URL_TIMEOUT: '{{resolve:ssm:PICAM_PRESIGNED_URL_TIMEOUT:2}}'
          BUCKET_NAME: !Ref PicamBucket
          INPUT_PREFIX: !Ref RawJpgsObjectKey
      FunctionName: !Sub '${GenerateUrlLambdaName}-${AWS::Region}'
      Handler: generateUrl.lambda_handler
      Role: !GetAtt 
        - GenerateUrlLambdaExecutionRole
        - Arn
      Runtime: python3.6
  TwitterLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref CodeBucketName
        S3Key: lambda/picam/tweet.zip
      Description: publishes gifs to social media
      Environment: 
        Variables:
          INPUT_PREFIX: !Ref GifsObjectKey
          TZ: ET
          #NOTE - you must store the tokens in a systems manager parameter store beforehand
          #store must be in the same region as the cloud formation stack
          TWITTER_APP_KEY: '{{resolve:ssm:TWITTER_PICAM_APP_KEY:1}}'
          TWITTER_APP_SECRET: '{{resolve:ssm:TWITTER_PICAM_APP_SECRET:1}}'
          TWITTER_OAUTH_TOKEN: '{{resolve:ssm:TWITTER_PICAM_OAUTH_TOKEN:1}}'
          TWITTER_OAUTH_TOKEN_SECRET: '{{resolve:ssm:TWITTER_PICAM_OAUTH_TOKEN_SECRET:1}}'
          TWITTER_MESSAGE: '{{resolve:ssm:TWITTER_PICAM_STATUS_MESSAGE:2}}'
      FunctionName: !Sub '${TwitterLambdaName}-${AWS::Region}'
      Handler: tweet.lambda_handler
      Role: !GetAtt 
        - TwitterLambdaExecutionRole
        - Arn
      Runtime: python3.6
  TwitterLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt
        - TwitterLambda
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub 'arn:aws:s3:::${PicamBucketName}'         #use sub and not ref to avoid circular dependency 
  CreateGifLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt
        - CreateGifLambda
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub 'arn:aws:s3:::${PicamBucketName}'         #use sub and not ref to avoid circular dependency 
  PicamBucket: 
    DependsOn:
      - CreateGifLambdaInvokePermission
      - TwitterLambdaInvokePermission
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        IgnorePublicAcls: True
        BlockPublicPolicy: True
        RestrictPublicBuckets: True
      BucketEncryption: 
          ServerSideEncryptionConfiguration: 
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
      BucketName: !Ref PicamBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  -
                    Name: suffix
                    Value: '.gif'
            Function: !GetAtt
              - TwitterLambda
              - Arn
          - Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  -
                    Name: suffix
                    Value: '.jpg'
            Function: !GetAtt
              - CreateGifLambda
              - Arn
  PicamBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PicamBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyIncorrectEncryptionHeader
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: 
              - !Sub 'arn:aws:s3:::${PicamBucketName}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': AES256
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: 
              - !Sub 'arn:aws:s3:::${PicamBucketName}/*'
            Condition:
              'Null':
                's3:x-amz-server-side-encryption': True
  TwitterLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: !Sub '${TwitterLambdaName}-EX-${AWS::Region}'
  GenerateUrlLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: !Sub '${GenerateUrlLambdaName}-EX-${AWS::Region}'
  CreateGifLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: !Sub '${CreateGifLambdaName}-EX-${AWS::Region}'
